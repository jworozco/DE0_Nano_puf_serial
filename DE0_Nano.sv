
//=======================================================
//  This code is generated by Terasic System Builder
//=======================================================

module DE0_Nano(


//=======================================================
//  PORT declarations
//=======================================================

//////////// CLOCK //////////
input                           CLOCK_50,

//////////// LED //////////
output logic       [7:0]        LED,

//////////// KEY //////////
input              [1:0]        KEY,

//////////// SW //////////
input              [3:0]        SW

/* //////////// SDRAM //////////
output logic       [12:0]       DRAM_ADDR,
output logic       [1:0]        DRAM_BA,
output logic                    DRAM_CAS_N,
output logic                    DRAM_CKE,
output logic                    DRAM_CLK,
output logic                    DRAM_CS_N,
inout             [15:0]        DRAM_DQ,
output logic       [1:0]        DRAM_DQM,
output logic                    DRAM_RAS_N,
output logic                    DRAM_WE_N,

//////////// EPCS //////////
output logic                    EPCS_ASDO,
input                           EPCS_DATA0,
output logic                    EPCS_DCLK,
output logic                    EPCS_NCSO,

//////////// Accelerometer and EEPROM //////////
output logic                    G_SENSOR_CS_N,
input                           G_SENSOR_INT,
output logic                    I2C_SCLK,
inout                           I2C_SDAT,

//////////// ADC //////////
output logic                    ADC_CS_N,
output logic                    ADC_SADDR,
output logic                    ADC_SCLK,
input                           ADC_SDAT,

//////////// 2x13 GPIO Header //////////
inout             [12:0]        GPIO_2,
input              [2:0]        GPIO_2_IN,

//////////// GPIO_0, GPIO_0 connect to GPIO Default //////////
inout             [33:0]        GPIO_0,
input              [1:0]        GPIO_0_IN,

//////////// GPIO_1, GPIO_1 connect to GPIO Default //////////
inout             [33:0]        GPIO_1,
input              [1:0]        GPIO_1_IN
 */
);

//=======================================================
//  PARAMETER declarations
//=======================================================
localparam logic [3:0] Zero   = 4'b0000;
localparam logic [3:0] One    = 4'b0001;
localparam logic [3:0] Two    = 4'b0010;
localparam logic [3:0] Three  = 4'b0011;
localparam logic [3:0] Four   = 4'b0100;
localparam logic [3:0] Five   = 4'b0101;
localparam logic [3:0] Six    = 4'b0110;
localparam logic [3:0] Seven  = 4'b0111;
localparam logic [3:0] Eight  = 4'b1000;
localparam logic [3:0] Nine   = 4'b1001;
localparam logic [3:0] Ten    = 4'b1010;
localparam logic [3:0] Eleven  = 4'b1011;
localparam logic [3:0] Twelve  = 4'b1100;
localparam logic [3:0] Thirteen  = 4'b1101;
localparam logic [3:0] Fourteen  = 4'b1110;
localparam logic [3:0] Fifhteen  = 4'b1111;


//=======================================================
//  REG/WIRE declarations
//=======================================================

// Inputs
wire [7:0] challenge;
wire [31:0] enables;
wire rst;

// Outputs
wire [7:0] response;
wire [7:0] done;


//=======================================================
//  Structural coding
//=======================================================

// Use SW as PUF challenge
assign challenge = {SW[3], SW[2], SW[1], SW[0], ~SW[3], ~SW[2], ~SW[1], ~SW[0] };

// Use LED as PUF response
assign LED = response;

// Use KEYs as PUF enable and reset
assign enables = {32{~KEY[0]}};
assign rst = KEY[1];

//Instantiate the PUF module

 puf_serial serial_scheme (
        .enable (enables),
        .challenge (challenge),
        .response (response),
        .done (done),
        .clock (CLOCK_50),
        .reset (rst)
        );

endmodule


